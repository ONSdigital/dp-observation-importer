// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-graph/v2/graph"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	kafka "github.com/ONSdigital/dp-kafka/v2"
	"github.com/ONSdigital/dp-observation-importer/config"
	"github.com/ONSdigital/dp-observation-importer/initialise"
	"github.com/ONSdigital/dp-reporter-client/reporter"
	"sync"
)

// Ensure, that InitialiserMock does implement initialise.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ initialise.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of initialise.Initialiser.
//
// 	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
// 		// make and configure a mocked initialise.Initialiser
// 		mockedInitialiser := &InitialiserMock{
// 			DoGetConsumerFunc: func(contextMoqParam context.Context, s1 string, s2 string, kafkaConfig *config.KafkaConfig) (kafka.IConsumerGroup, error) {
// 				panic("mock out the DoGetConsumer method")
// 			},
// 			DoGetGraphDBFunc: func(contextMoqParam context.Context) (*graph.DB, error) {
// 				panic("mock out the DoGetGraphDB method")
// 			},
// 			DoGetHealthCheckFunc: func(configMoqParam *config.Config, s1 string, s2 string, s3 string) (healthcheck.HealthCheck, error) {
// 				panic("mock out the DoGetHealthCheck method")
// 			},
// 			DoGetImportErrorReporterFunc: func(kafkaProducer reporter.KafkaProducer, s string) (reporter.ImportErrorReporter, error) {
// 				panic("mock out the DoGetImportErrorReporter method")
// 			},
// 			DoGetProducerFunc: func(contextMoqParam context.Context, s string, kafkaConfig *config.KafkaConfig) (kafka.IProducer, error) {
// 				panic("mock out the DoGetProducer method")
// 			},
// 		}
//
// 		// use mockedInitialiser in code that requires initialise.Initialiser
// 		// and then make assertions.
//
// 	}
type InitialiserMock struct {
	// DoGetConsumerFunc mocks the DoGetConsumer method.
	DoGetConsumerFunc func(contextMoqParam context.Context, s1 string, s2 string, kafkaConfig *config.KafkaConfig) (kafka.IConsumerGroup, error)

	// DoGetGraphDBFunc mocks the DoGetGraphDB method.
	DoGetGraphDBFunc func(contextMoqParam context.Context) (*graph.DB, error)

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(configMoqParam *config.Config, s1 string, s2 string, s3 string) (healthcheck.HealthCheck, error)

	// DoGetImportErrorReporterFunc mocks the DoGetImportErrorReporter method.
	DoGetImportErrorReporterFunc func(kafkaProducer reporter.KafkaProducer, s string) (reporter.ImportErrorReporter, error)

	// DoGetProducerFunc mocks the DoGetProducer method.
	DoGetProducerFunc func(contextMoqParam context.Context, s string, kafkaConfig *config.KafkaConfig) (kafka.IProducer, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetConsumer holds details about calls to the DoGetConsumer method.
		DoGetConsumer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// KafkaConfig is the kafkaConfig argument value.
			KafkaConfig *config.KafkaConfig
		}
		// DoGetGraphDB holds details about calls to the DoGetGraphDB method.
		DoGetGraphDB []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// ConfigMoqParam is the configMoqParam argument value.
			ConfigMoqParam *config.Config
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
		}
		// DoGetImportErrorReporter holds details about calls to the DoGetImportErrorReporter method.
		DoGetImportErrorReporter []struct {
			// KafkaProducer is the kafkaProducer argument value.
			KafkaProducer reporter.KafkaProducer
			// S is the s argument value.
			S string
		}
		// DoGetProducer holds details about calls to the DoGetProducer method.
		DoGetProducer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// KafkaConfig is the kafkaConfig argument value.
			KafkaConfig *config.KafkaConfig
		}
	}
	lockDoGetConsumer            sync.RWMutex
	lockDoGetGraphDB             sync.RWMutex
	lockDoGetHealthCheck         sync.RWMutex
	lockDoGetImportErrorReporter sync.RWMutex
	lockDoGetProducer            sync.RWMutex
}

// DoGetConsumer calls DoGetConsumerFunc.
func (mock *InitialiserMock) DoGetConsumer(contextMoqParam context.Context, s1 string, s2 string, kafkaConfig *config.KafkaConfig) (kafka.IConsumerGroup, error) {
	if mock.DoGetConsumerFunc == nil {
		panic("InitialiserMock.DoGetConsumerFunc: method is nil but Initialiser.DoGetConsumer was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		KafkaConfig     *config.KafkaConfig
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
		KafkaConfig:     kafkaConfig,
	}
	mock.lockDoGetConsumer.Lock()
	mock.calls.DoGetConsumer = append(mock.calls.DoGetConsumer, callInfo)
	mock.lockDoGetConsumer.Unlock()
	return mock.DoGetConsumerFunc(contextMoqParam, s1, s2, kafkaConfig)
}

// DoGetConsumerCalls gets all the calls that were made to DoGetConsumer.
// Check the length with:
//     len(mockedInitialiser.DoGetConsumerCalls())
func (mock *InitialiserMock) DoGetConsumerCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
	KafkaConfig     *config.KafkaConfig
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
		KafkaConfig     *config.KafkaConfig
	}
	mock.lockDoGetConsumer.RLock()
	calls = mock.calls.DoGetConsumer
	mock.lockDoGetConsumer.RUnlock()
	return calls
}

// DoGetGraphDB calls DoGetGraphDBFunc.
func (mock *InitialiserMock) DoGetGraphDB(contextMoqParam context.Context) (*graph.DB, error) {
	if mock.DoGetGraphDBFunc == nil {
		panic("InitialiserMock.DoGetGraphDBFunc: method is nil but Initialiser.DoGetGraphDB was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockDoGetGraphDB.Lock()
	mock.calls.DoGetGraphDB = append(mock.calls.DoGetGraphDB, callInfo)
	mock.lockDoGetGraphDB.Unlock()
	return mock.DoGetGraphDBFunc(contextMoqParam)
}

// DoGetGraphDBCalls gets all the calls that were made to DoGetGraphDB.
// Check the length with:
//     len(mockedInitialiser.DoGetGraphDBCalls())
func (mock *InitialiserMock) DoGetGraphDBCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockDoGetGraphDB.RLock()
	calls = mock.calls.DoGetGraphDB
	mock.lockDoGetGraphDB.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(configMoqParam *config.Config, s1 string, s2 string, s3 string) (healthcheck.HealthCheck, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		ConfigMoqParam *config.Config
		S1             string
		S2             string
		S3             string
	}{
		ConfigMoqParam: configMoqParam,
		S1:             s1,
		S2:             s2,
		S3:             s3,
	}
	mock.lockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	mock.lockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(configMoqParam, s1, s2, s3)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	ConfigMoqParam *config.Config
	S1             string
	S2             string
	S3             string
} {
	var calls []struct {
		ConfigMoqParam *config.Config
		S1             string
		S2             string
		S3             string
	}
	mock.lockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	mock.lockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetImportErrorReporter calls DoGetImportErrorReporterFunc.
func (mock *InitialiserMock) DoGetImportErrorReporter(kafkaProducer reporter.KafkaProducer, s string) (reporter.ImportErrorReporter, error) {
	if mock.DoGetImportErrorReporterFunc == nil {
		panic("InitialiserMock.DoGetImportErrorReporterFunc: method is nil but Initialiser.DoGetImportErrorReporter was just called")
	}
	callInfo := struct {
		KafkaProducer reporter.KafkaProducer
		S             string
	}{
		KafkaProducer: kafkaProducer,
		S:             s,
	}
	mock.lockDoGetImportErrorReporter.Lock()
	mock.calls.DoGetImportErrorReporter = append(mock.calls.DoGetImportErrorReporter, callInfo)
	mock.lockDoGetImportErrorReporter.Unlock()
	return mock.DoGetImportErrorReporterFunc(kafkaProducer, s)
}

// DoGetImportErrorReporterCalls gets all the calls that were made to DoGetImportErrorReporter.
// Check the length with:
//     len(mockedInitialiser.DoGetImportErrorReporterCalls())
func (mock *InitialiserMock) DoGetImportErrorReporterCalls() []struct {
	KafkaProducer reporter.KafkaProducer
	S             string
} {
	var calls []struct {
		KafkaProducer reporter.KafkaProducer
		S             string
	}
	mock.lockDoGetImportErrorReporter.RLock()
	calls = mock.calls.DoGetImportErrorReporter
	mock.lockDoGetImportErrorReporter.RUnlock()
	return calls
}

// DoGetProducer calls DoGetProducerFunc.
func (mock *InitialiserMock) DoGetProducer(contextMoqParam context.Context, s string, kafkaConfig *config.KafkaConfig) (kafka.IProducer, error) {
	if mock.DoGetProducerFunc == nil {
		panic("InitialiserMock.DoGetProducerFunc: method is nil but Initialiser.DoGetProducer was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		KafkaConfig     *config.KafkaConfig
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		KafkaConfig:     kafkaConfig,
	}
	mock.lockDoGetProducer.Lock()
	mock.calls.DoGetProducer = append(mock.calls.DoGetProducer, callInfo)
	mock.lockDoGetProducer.Unlock()
	return mock.DoGetProducerFunc(contextMoqParam, s, kafkaConfig)
}

// DoGetProducerCalls gets all the calls that were made to DoGetProducer.
// Check the length with:
//     len(mockedInitialiser.DoGetProducerCalls())
func (mock *InitialiserMock) DoGetProducerCalls() []struct {
	ContextMoqParam context.Context
	S               string
	KafkaConfig     *config.KafkaConfig
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		KafkaConfig     *config.KafkaConfig
	}
	mock.lockDoGetProducer.RLock()
	calls = mock.calls.DoGetProducer
	mock.lockDoGetProducer.RUnlock()
	return calls
}
