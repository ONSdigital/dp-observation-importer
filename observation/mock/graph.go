// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-graph/v2/models"
	"github.com/ONSdigital/dp-graph/v2/observation"
	"sync"
)

// Ensure, that ObservationMock does implement Observation.
// If this is not the case, regenerate this file with moq.
// var _ driver.Observation = &ObservationMock{}

// ObservationMock is a mock implementation of Observation.
//
// 	func TestSomethingThatUsesObservation(t *testing.T) {
//
// 		// make and configure a mocked Observation
// 		mockedObservation := &ObservationMock{
// 			InsertObservationBatchFunc: func(ctx context.Context, attempt int, instanceID string, observations []*models.Observation, dimensionIDs map[string]string) error {
// 				panic("mock out the InsertObservationBatch method")
// 			},
// 			StreamCSVRowsFunc: func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
// 				panic("mock out the StreamCSVRows method")
// 			},
// 		}
//
// 		// use mockedObservation in code that requires Observation
// 		// and then make assertions.
//
// 	}
type ObservationMock struct {
	// InsertObservationBatchFunc mocks the InsertObservationBatch method.
	InsertObservationBatchFunc func(ctx context.Context, attempt int, instanceID string, observations []*models.Observation, dimensionIDs map[string]string) error

	// StreamCSVRowsFunc mocks the StreamCSVRows method.
	StreamCSVRowsFunc func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// InsertObservationBatch holds details about calls to the InsertObservationBatch method.
		InsertObservationBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Attempt is the attempt argument value.
			Attempt int
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Observations is the observations argument value.
			Observations []*models.Observation
			// DimensionIDs is the dimensionIDs argument value.
			DimensionIDs map[string]string
		}
		// StreamCSVRows holds details about calls to the StreamCSVRows method.
		StreamCSVRows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// FilterID is the filterID argument value.
			FilterID string
			// Filters is the filters argument value.
			Filters *observation.DimensionFilters
			// Limit is the limit argument value.
			Limit *int
		}
	}
	lockInsertObservationBatch sync.RWMutex
	lockStreamCSVRows          sync.RWMutex
}

// InsertObservationBatch calls InsertObservationBatchFunc.
func (mock *ObservationMock) InsertObservationBatch(ctx context.Context, attempt int, instanceID string, observations []*models.Observation, dimensionIDs map[string]string) error {
	if mock.InsertObservationBatchFunc == nil {
		panic("ObservationMock.InsertObservationBatchFunc: method is nil but Observation.InsertObservationBatch was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Attempt      int
		InstanceID   string
		Observations []*models.Observation
		DimensionIDs map[string]string
	}{
		Ctx:          ctx,
		Attempt:      attempt,
		InstanceID:   instanceID,
		Observations: observations,
		DimensionIDs: dimensionIDs,
	}
	mock.lockInsertObservationBatch.Lock()
	mock.calls.InsertObservationBatch = append(mock.calls.InsertObservationBatch, callInfo)
	mock.lockInsertObservationBatch.Unlock()
	return mock.InsertObservationBatchFunc(ctx, attempt, instanceID, observations, dimensionIDs)
}

// InsertObservationBatchCalls gets all the calls that were made to InsertObservationBatch.
// Check the length with:
//     len(mockedObservation.InsertObservationBatchCalls())
func (mock *ObservationMock) InsertObservationBatchCalls() []struct {
	Ctx          context.Context
	Attempt      int
	InstanceID   string
	Observations []*models.Observation
	DimensionIDs map[string]string
} {
	var calls []struct {
		Ctx          context.Context
		Attempt      int
		InstanceID   string
		Observations []*models.Observation
		DimensionIDs map[string]string
	}
	mock.lockInsertObservationBatch.RLock()
	calls = mock.calls.InsertObservationBatch
	mock.lockInsertObservationBatch.RUnlock()
	return calls
}

// StreamCSVRows calls StreamCSVRowsFunc.
func (mock *ObservationMock) StreamCSVRows(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
	if mock.StreamCSVRowsFunc == nil {
		panic("ObservationMock.StreamCSVRowsFunc: method is nil but Observation.StreamCSVRows was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		FilterID:   filterID,
		Filters:    filters,
		Limit:      limit,
	}
	mock.lockStreamCSVRows.Lock()
	mock.calls.StreamCSVRows = append(mock.calls.StreamCSVRows, callInfo)
	mock.lockStreamCSVRows.Unlock()
	return mock.StreamCSVRowsFunc(ctx, instanceID, filterID, filters, limit)
}

// StreamCSVRowsCalls gets all the calls that were made to StreamCSVRows.
// Check the length with:
//     len(mockedObservation.StreamCSVRowsCalls())
func (mock *ObservationMock) StreamCSVRowsCalls() []struct {
	Ctx        context.Context
	InstanceID string
	FilterID   string
	Filters    *observation.DimensionFilters
	Limit      *int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}
	mock.lockStreamCSVRows.RLock()
	calls = mock.calls.StreamCSVRows
	mock.lockStreamCSVRows.RUnlock()
	return calls
}
